(ns hoplon.app-pages._index_DOT_html (:require [javelin.core :refer [input? cell cell? destroy-cell! ^{:private true} last-rank ^{:deprecated true} lift lens? set-formula! cell-doseq* ^{:dynamic true, :private true} *tx* deref* set-cell! lens formula? alts! dosync* cell-map formula]] [hoplon.core :refer [form audio input hgroup do! timeout $text base h1 embed h3 body keygen progress main cite on-page-load object i p nav ruby check-val! a menu blockquote img $comment span track ^{:private true} seq?* data u dl select html thead del eventsource fieldset aside figure ^{:private true} replaceChild figcaption q on! bdi append-child! video address caption dd rp hr tbody table acronym frame applet html-var add-initfn! pre ul ^{:private true} insertBefore dir replace-child! html-time html-map sup dfn sub mark script big button wbr insert-before! strong li dt frameset td tr section th optgroup bust-cache iframe remove-child! legend em kbd spliced article isindex abbr ^{:private true} removeChild command prerendering? <!-- source output basefont route-cell header datalist tfoot s ins footer title ^{:private true} is-ie8 h5 canvas param font div option ensure-kids! summary samp center small style textarea loop-tpl* strike h4 tt head set-attribute! ol details ^{:private true} setAttribute col ^{:private true} vector?* label rt when-dom h6 link page-load colgroup meter html-meta static-elements text-val! bdo --> b ^{:private true} appendChild code ^{:private true} node? noframes do-watch noscript safe-nth h2 area br]]) (:require-macros [util :refer [md highlight]] [javelin.core :refer [with-let mx2 dosync cell= set-cell!= prop-cell cell-doseq defc cell-let-1 defc= macroexpand-all mx cell-let]] [hoplon.core :refer [text elem+ cache-key with-timeout defelem+ static sexp defelem elem def-values with-page-load with-dom loop-tpl with-interval with-init!]]))

(def +nav-links+ (mapv (fn [[url title]] (a :href url title)) [["http://hoplon.discoursehosting.net/" "Discourse"] ["http://webchat.freenode.net/?channels=hoplon" "IRC"] ["http://clojurians.net/" "Slack"] ["https://github.com/hoplon/hoplon/wiki" "Wiki"] ["https://github.com/hoplon" "Code"]]))

(defn | "Create deep nested elements following a regular attribute pattern.\n\n  (| div :class [\"foo\" \"bar\" \"baz\"] (p \"Hello\"))\n\n  is analagous to:\n\n  (div :class \"foo\"\n    (div :class \"bar\"\n      (div :class \"baz\"\n        (p \"Hello\"))))" [elem-ctor attr-kw attr-vals & kids] (let [[inner & outers] (reverse attr-vals)] (reduce (fn* [p1__3984# p2__3983#] (elem-ctor attr-kw p2__3983# p1__3984#)) (elem-ctor attr-kw inner kids) outers)))

(defn loud [& children] (div :css {:text-transform "uppercase"} children))

(defelem timer [attrs children] (let [start (or (:start attrs) 0) seconds (cell start)] (.setInterval js/window (fn* [] (swap! seconds inc)) 1000) (div attrs (cell= (str "Seconds Elapsed: " seconds)))))

(defelem todo-list [{:keys [title]} _] (let [todo-items (cell []) new-item (cell "")] (div (h3 (or title "TODO")) (ul :style "margin-left: 20px;" (loop-tpl :bindings [todo todo-items] (li :style "list-style-type:disc;" todo))) (input :type "text" :value new-item :change (fn* [p1__3985#] (reset! new-item (clojure.core/deref p1__3985#)))) (button :click (fn* [] (dosync (swap! todo-items conj (clojure.core/deref new-item)) (reset! new-item ""))) (text "Add #~{(inc (count todo-items))}")))))

(defn scroll-here [] (let [marker "marker"] (js/jQuery (fn* [] (set! (.-location js/window) (str "#" marker)))) (a :name marker)))

(html (head (html-meta :charset "utf-8") (html-meta :name "viewport" :content "width=device-width, maximum-scale=1.0") (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge") (title "Hoplon, a ClojureScript Web Framework") (html-meta :name "description" :content "ClojureScript Web Framework") (link :rel "shortcut icon" :href "/images/logos/hoplon-favicon.png") (link :rel "apple-touch-icon" :href "/images/logos/hoplon-favicon.png") (style "body{display:none;}") (link :rel "stylesheet" :href "css/syntax.css") (link :rel "stylesheet" :href "css/main.css")) (body :class "home" (div :id "page" :class "page" (header (| div :class ["nav-mobile" "nav-mobile-content"] +nav-links+) (nav (| div :class ["ui-cols" "ui-col-10 ui-skip-1"] (div :class "header-logo" (a :href "/" :style "background-image: url(images/logos/hoplon-logo.png);" "Adzerk")) (div :class "header-links" +nav-links+) (div :class "header-menu" (a :href "#menu")))) (| div :class ["header-promo" "ui-cols" "ui-col-10 ui-skip-1" "header-promo-content"] (div :class "header-promo-logo" (a :href "http://hoplon.io" (img :src "/images/logos/hoplon-logo.png" :alt "Hoplon, a ClojureScript Web Framework"))) (div :class "header-promo-text" (h1 "Hoplon") (h3 "ClojureScript Web Framework") (p (a :href "https://github.com/hoplon/hoplon/wiki/Get-Started" :class "ui-action ui-action-large" "Get Started"))))) (main :id "content" (| div :class ["post" "ui-cols" "ui-col-10 ui-skip-1" "post-body"] (div :class "promo" (div (h2 "Clojure and ClojureScript, everywhere.") (md p "Hoplon is a set of [Clojure](http://clojure.org)\nand [ClojureScript](https://github.com/clojure/clojurescript)\nlibraries that pave over the web's idiosyncrasies and present a\nsimpler way to design and build single-page web applications.\n[Learn more on our wiki](https://github.com/hoplon/hoplon/wiki)."))) (div :class "features" (ul (li (img :alt "Custom Elements icon" :src "images/graphics/custom-elements.png") (md "**Custom HTML elements are regular functions** and can be created\nand composed functionally\nwith [HLisp](https://github.com/hoplon/hoplon/wiki/HLisp)")) (li (img :alt "Spreadsheet Icon" :src "images/graphics/spreadsheet.png") (md "**Spreadsheet-like dataflow** with\nthe [Javelin](https://github.com/hoplon/javelin) ClojureScript\nlibrary. Intuitively model reactive behavior using cells and\nformulas.")) (li (img :alt "Castra Icon" :src "images/graphics/uncoupled.png") (md "**Interact with the server** with\nthe [Castra](https://github.com/hoplon/castra) Clojure and\nClojureScript library. Define functions on the server, call them\nfrom the client.")))) (div :class "demos" :style "font-size: 0.9em;" (div (h4 "A simple custom element") (md p "Elements and custom elements are regular functions. The\nfunction below, `loud`, accepts any number of children. It\nconstructs and returns a `div` containing the uppercased\n`children`.") (div :style "width:60%; float:left; padding: 5px; border: 1px solid #00ace4; border-radius:10px; color: #333;" (highlight :clj "(defn loud [& children]\n  (div :css {:text-transform \"uppercase\"} children))\n\n(loud \"Lisp Can Do It\")")) (div :style "padding: 5px; width: 35%; float:right; background-color: #eee; border: 1px solid #aaa; border-radius:10px;" (loud "Lisp Can Do It"))) (div :style "padding-top:20px; clear:both;" (h4 "A stateful custom element") (md p "In this example, the `timer` function initializes\na [Javelin](https://github.com/hoplon/javelin) input cell and\nschedules it for periodic update using `window.setInterval`.\nThe text of the returned `div` is attached reactively to\n`seconds` through a formula cell created using  `cell=`.") (md p "`defelem` is a convenience macro for creating functions that handle attribute arguments naturally.") (div :style "width:60%; float:left; padding: 5px; border: 1px solid #00ace4; border-radius:10px; color: #333;" (highlight :clj "(defelem timer [attrs children]\n  (let [start   (or (:start attrs) 0)\n        seconds (cell start)]\n    (.setInterval js/window #(swap! seconds inc) 1000)\n    (div attrs (cell= (str \"Seconds Elapsed: \" seconds)))))\n\n;; our first timer will start at 0 and count up\n(p (timer :style \"color: green;\" :start 0))\n\n;; start 3 more timers, each with different starting values\n(apply ol (map li (for [r (range 1 4)] (timer :start r))))")) (div :style "padding: 5px; width: 35%; float:right; background-color: #eee; border: 1px solid #aaa; border-radius:10px;" (p (timer :style "color: green;" :start 0)) (apply ol (map li (for [r (range 1 4)] (timer :start r)))))) (div :style "padding-top:20px; clear:both;fd" (h4 "An application") (md p "In this final example, `todo-list` is a function that returns\nan instance of a simple todo list application. The\napplication responds to user input by updating input cell\nvalues when [DOM events](https://en.wikipedia.org/wiki/DOM_events) occur.") (md p "The `:change` event on the text input is attached to a function that updates the `new-item` input cell as keystrokes occur.") (md p "The `:click` event on the button is attached to a function\nthat appends the value of `new-item` to the end of\n`todo-items` inside a `dosync`. `dosync` is a transactional\nconstruct that suspends the propagation of new values through\nthe cell graph while updating multiple cells.") (md p "`todo-items` are rendered as `li` elements using the\n`loop-tpl` macro. `loop-tpl` efficiently maps\ndynamically-sized collections to DOM nodes.") (div :style "width:60%; float:left; padding: 5px; border: 1px solid #00ace4; border-radius:10px; color: #333;" (highlight :clj "(defelem todo-list [{:keys [title]} _]\n  (let [todo-items (cell [])\n        new-item   (cell \"\")]\n    (div\n      (h3 (or title \"TODO\"))\n      (ul\n        (loop-tpl :bindings [todo todo-items]\n          (li todo)))\n      (input :type \"text\"\n             :value new-item\n             :change #(reset! new-item @%))\n      (button :click #(dosync\n                       (swap! todo-items conj @new-item)\n                       (reset! new-item \"\"))\n        (text \"Add #~{(inc (count todo-items))}\")))))\n\n(todo-list :title \"TODO List\")")) (div :style "padding: 5px; width: 35%; float:right; background-color: #eee; border: 1px solid #aaa; border-radius:10px;" (todo-list :title "TODO List")))))) (| div :class ["mention" "ui-cols" "ui-col-10 ui-skip-1"] (img :src "/images/logos/adzerk.png" :alt "Adzerk") (md blockquote "**Made at [Adzerk](http://adzerk.com)** | *[Ad serving infrastructure](http://adzerk.com) for awesome companies*")) (footer (div :class "ui-cols" (div :class "ui-col-10 ui-skip-1" (div :class "footer-links" (a :href "http://github.com/hoplon" :class "network github" "Adzerk on Github") (a :href "https://github.com/tailrecursion/hoplon.io" "Site Source")) (div :class "footer-privacy" (md small "Copyright © 2015 [Alan Dipert](http://tailrecursion.com/~alan/),\n[Micha Niskin](https://github.com/micha),\n[Joshua Smith](https://github.com/somegoodpixels)"))))))))

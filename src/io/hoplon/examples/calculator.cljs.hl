(ns io.hoplon.examples.calculator
  (:refer-hoplon :exclude [code])
  (:require-macros
    [bootstrap.code  :as code])
  (:require
    [bootstrap.panel :as panel]))


(defn code []
  (code/highlight :clj
    ;;{{
    (page "index.html"
      (:refer-clojure :exclude [int]))

    (def int js/parseInt)
    (def ops {"+" + "-" - "*" * "/" /})

    (defc  x      0)
    (defc  y      0)
    (defc  op     +)
    (defc= result (op x y))

    (html
      (head)
      (body
        (input
          :id "x"
          :type "text"
          :value "0"
          :on-change #(reset! x (int (val-id "x"))))
        (select
          :id "op"
          :on-change #(reset! op (ops (val-id "op")))
          (option :value "+" :selected true "+")
          (option :value "-" "-")
          (option :value "*" "*")
          (option :value "/" "/"))
        (input
          :id "y"
          :type "text"
          :value "0"
          :on-change #(reset! y (int (val-id "y"))))
        (text " = ~{result}")))
    ;;}}
    ))

(defn demo []
  (let [x (cell 0)
        y (cell 0)
        op (cell +)
        ops {"+" + "-" - "*" * "/" /}]
    (panel/default
      (panel/body
        (input
          :id "calc-x"
          :type "text"
          :value @x
          :on-change #(reset! x (int (val-id "calc-x"))))
        (select
          :id "calc-op"
          :style "margin-left:15px;margin-right:15px;"
          :on-change #(reset! op (ops (val-id "calc-op")))
          (option :value "+" :selected true "+")
          (option :value "-" "-")
          (option :value "*" "*")
          (option :value "/" "/"))
        (input
          :id "calc-y"
          :type "text"
          :value @y
          :on-change #(reset! y (int (val-id "calc-y"))))
        (text " = ~(op x y)")))))

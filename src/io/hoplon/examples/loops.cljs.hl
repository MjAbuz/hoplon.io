(ns io.hoplon.examples.loops
  (:refer-hoplon :exclude [code])
  (:require-macros
    [bootstrap.code  :as code])
  (:require
    [clojure.string  :as string]
    [bootstrap.panel :as panel]))

(defn code1 []
  (code/highlight :clj
    ;;{{
    (page "index.html")

    (defc things ["one" "two" "three"])

    (html
      (head)
      (body
        (ul
          (loop-tpl :bindings [x things]
            (li @x)))))
    ;;}}
    ))

(defn ex1 []
  (let [xs (cell ["one" "two" "three"])]
    (panel/default
      (panel/body
        (ul
          (loop-tpl :size 3 :bindings [x xs]
            (li @x)))))))

(defn code2 []
  (code/highlight :clj
    ;;{{
    (page "index.html"
      (:require
       [clojure.string :refer [upper-case lower-case]]))
    ;; State machine private
    (defc  uc?    false)
    (defc  things [{:text "one"} {:text "two"} {:text "three"}])
    (defc= case   (if uc? upper-case lower-case))

    ;; State machine public API
    (defc= state  (mapv #(update-in % [:text] case) things))
    (defn toggle-case! [_] (swap! uc? not))

    ;; Presentation (uses public API)
    (html
      (head)
      (body
        (ul
          (loop-tpl :bindings [{x :text} state]
            (li (text "~{x}"))))
        (button :on-click toggle-case! "toggle case")))
    ;;}}
    ))

(defn ex2 []
  (let [u? (cell false)
        uc (cell= (if u? string/upper-case string/lower-case))
        xs (cell [{:text "one"} {:text "two"} {:text "three"}])
        st (cell= (mapv #(update-in % [:text] uc) xs))]
    (panel/default
      (panel/body
        (ul
          (loop-tpl :size 3 :bindings [{x :text} st]
            (li (text "~{x}"))))
        (button :on-click #(swap! u? not) "toggle case")))))
